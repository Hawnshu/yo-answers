package irprac3;

import java.util.Scanner;

public class IRprac3 {

    int path[][] = new int[10][10];
    double pagerank[] = new double[10];

    @SuppressWarnings("empty-statement")
    public void calc(double totalNodes) {
        double InitialPageRank;
        double OutgoingLinks = 0;
        double DampingFactor = 0.85;
        double TempPageRank[] = new double[10];
        int ExternalNodeNumber;
        int InternalNodeNumber;
        int k = 1;
        int ITERATION_STEP = 1;
        InitialPageRank = 1 / totalNodes;
        System.out.println("Total Number of Nodes :" + totalNodes
                + "\t Initial PageRank of all Nodes :" + InitialPageRank + "\n");
        for (k = 1; k <= totalNodes; k++) {
            this.pagerank[k] = InitialPageRank;
        }
        System.out.println("\n Initial PageRank Values, 0th Step \n");
        for (k = 1; k <= totalNodes; k++) {
            System.out.println(" Page Rank of " + k + " is :\t" + this.pagerank[k] + "\n");
        }
        while (ITERATION_STEP <= 2) {
            for (k = 1; k <= totalNodes; k++) {
                TempPageRank[k] = this.pagerank[k];
                this.pagerank[k] = 0;
            }
            for (InternalNodeNumber = 1; InternalNodeNumber <= totalNodes; InternalNodeNumber++) {
                for (ExternalNodeNumber = 1; ExternalNodeNumber <= totalNodes; ExternalNodeNumber++) {
                    if (this.path[ExternalNodeNumber][InternalNodeNumber] == 1) {
                        k = 1;
                        OutgoingLinks = 0;
                        while (k <= totalNodes) {
                            if (this.path[ExternalNodeNumber][k] == 1) {
                                OutgoingLinks = OutgoingLinks + 1;
                            }
                            k = k + 1;
                        }
                        this.pagerank[InternalNodeNumber] += TempPageRank[ExternalNodeNumber]
                                * (1 / OutgoingLinks);
                    }
                }
            }
            System.out.println("\n After " + ITERATION_STEP + "th Step \n");
            for (k = 1; k <= totalNodes; k++) {
                System.out.println("Page Rank of " + k + "is \t" + this.pagerank[k] + "\n");
            }
            ITERATION_STEP = ITERATION_STEP + 1;
        }
        for (k = 1; k <= totalNodes; k++) {
            this.pagerank[k] = (1 - DampingFactor) + DampingFactor * this.pagerank[k];
        }
        System.out.println("\n Final Page Rank : \n");
        for (k = 1; k <= totalNodes; k++) {
            System.out.println("Page rank of" + k + "is :\t" + this.pagerank[k] + "\n");
        }

    }

    public static void main(String[] args) {
        int nodes, i, j;
        Scanner in = new Scanner(System.in);
        System.out.println("Enter the Number of WebPages \n");
        nodes = in.nextInt();
        IRprac3 p = new IRprac3();
        System.out.println("enter the Adjacency Matrix with 1 -> PATH & 0 -> NO PATH Between two WebPages: \n");
        for (i = 1; i <= nodes; i++) {
            for (j = 1; j <= nodes; j++) {
                p.path[i][j] = in.nextInt();
                if (j == i) {
                    p.path[i][j] = 0;
                }
            }
        }
        p.calc(nodes);
    }
}